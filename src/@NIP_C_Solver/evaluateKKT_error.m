function [KKT_error_primal, KKT_error_dual, KKT_error_dual_scaled,...
    KKT_error_complementary, KKT_error_complementary_scaled, KKT_error_total] = ...
    evaluateKKT_error(self, gamma_h, gamma_c, gamma_g, h, c, g, LAG_grad_z)

% scaling parameter
scaling_dual = max([self.Option.KKT_scaling_max,...
    norm([gamma_h; gamma_c; gamma_g], 1)/(self.NLP.Dim.h + self.NLP.Dim.c + self.NLP.Dim.g)])/self.Option.KKT_scaling_max;
scaling_complementary = max([self.Option.KKT_scaling_max,...
    norm([gamma_c; gamma_g], 1)/(self.NLP.Dim.c + self.NLP.Dim.g)])/self.Option.KKT_scaling_max;
% KKT error
KKT_error_primal = norm([h;...
    min([zeros(self.NLP.Dim.c, 1), c], [], 2);...
    min([zeros(self.NLP.Dim.g, 1), g], [], 2)], inf);
KKT_error_dual = norm([LAG_grad_z';...
    min([zeros(self.NLP.Dim.c, 1), gamma_c], [], 2);...
    min([zeros(self.NLP.Dim.g, 1), gamma_g], [], 2)], inf);
KKT_error_dual_scaled = KKT_error_dual/scaling_dual;
KKT_error_complementary = norm([c .* gamma_c; g .* gamma_g], inf);
KKT_error_complementary_scaled = KKT_error_complementary/scaling_complementary;
KKT_error_total = max([KKT_error_primal, KKT_error_dual_scaled, KKT_error_complementary_scaled]);


end